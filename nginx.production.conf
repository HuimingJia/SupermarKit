# [1] SSL Configuration according to Mozilla guidelines
#     https://wiki.mozilla.org/Security/Server_Side_TLS
#     https://mozilla.github.io/server-side-tls/ssl-config-generator/
# [2] Security Procedures according to OWASP
#     https://www.owasp.org/index.php/SCG_WS_nginx#SSL_Module
# [3] https://unix.stackexchange.com/questions/94104/real-world-use-of-tcp-defer-accept
# [4] OCSP fetch OCSP records from URL in ssl_certificate and cache them
#     https://www.digitalocean.com/community/tutorials/how-to-configure-ocsp-stapling-on-apache-and-nginx
# [5] https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching

upstream supermarkit {
  # Each service gets an entry in /etc/hosts with its name.
  # the app service is used to run the app and starts the server on port 3000
  server app:3000;
}

# [1] HTTP Configuration
server {
  # [3] Use deferred for performance optimization
  listen 80 default_server deferred;

  # Enable IPv6
  listen [::]:80 default_server deferred;

  # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
  return 301 https://$host$request_uri;
}

# [1] HTTPS Configuration
server {
  listen                                443 ssl http2;
  listen                                [::]:443 ssl http2;
  ssl_certificate                       /etc/nginx/certs/fullchain.pem;
  ssl_certificate_key                   /etc/nginx/certs/privkey.pem;
  ssl_session_cache                     shared:SSL:50m;
  ssl_session_timeout                   5m;
  ssl_session_tickets                   off;
  ssl_dhparam                           /etc/nginx/certs/dhparam.pem;
  ssl_prefer_server_ciphers             on;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_protocols                         TLSv1 TLSv1.1 TLSv1.2;

  # [4] OCPS Stapling
  ssl_stapling                          on;
  ssl_stapling_verify                   on;
  ## verify chain of trust of OCSP response using Root CA and Intermediate certs
  ssl_trusted_certificate /etc/nginx/certs/chain.pem;

  # [2] HTTP Secure Headers
  add_header Strict-Transport-Security  "max-age=63072000; includeSubdomains; preload";
  add_header X-Frame-Options            SAMEORIGIN;
  add_header X-Content-Type-Options     nosniff;

  # [2]
  server_tokens off;


  root /app/public;
  access_log /etc/nginx/log/access.log;
  error_log /etc/nginx/log/error.log info;

  location ^~ /assets/ {
    gzip_vary;
    gzip_static    on;
    gzip_comp_level 5;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri @supermarkit;

  location @supermarkit {

    # [5] Pass a host to upstream server equal to the request line if present or
    # client request host header
    proxy_set_header Host $host;

    # [5] Must tell upstream server that the request was http or https
    # if not present, rails force_ssl will keep sending location header and
    # instruct the browser to redirect to https
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://supermarkit;
  }
}
